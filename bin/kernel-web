#!/usr/bin/ruby
require 'yaml'
require 'fileutils'

kernel_source = ENV['KERNEL_SOURCE'] || "/srv/kbuild/kernel-source.git"
kernel_livepatch = ENV['KERNEL_LIVEPATCH'] || "/srv/kbuild/kgraft-patches.git"

def usage
  puts "usage: kernel-web SUSE|openSUSE <output directory>"
  exit 1
end


def branches_with_flag flag
  branches = []
  File.open("branches.conf", "rb"){|f|
    f.each_line{|l|
      branch, _ , flags = l.chomp.partition ":"
      next if branch.length < 1
      next if branch =~ /#/
      flags, _ = flags.partition "#"
      flags = flags.split /[[:space:]]+/
      branches.push branch if flags.include? flag
    }
  }
  branches
end

def expand_template tmpl, hash
  hash.keys.each{|k|
    tmpl = tmpl.gsub(/@#{k}@/,hash[k])
  }
  tmpl
end

def get_branchinfo repo, branch
  cmd=%W(git --git-dir #{repo} show #{branch}:README.BRANCH)
  stdin, inpipe = IO.pipe
  outpipe, stdout= IO.pipe
  errpipe, stderr= IO.pipe
  pid = spawn(*cmd, :err=>stderr, :out=>stdout, :in=>stdin, :close_others=>true)
  [stdin, stdout, stderr].each{|fd| fd.close}
  out = ''
  err = ''
  threads = [ Thread.new{ out = outpipe.read }, Thread.new{ err = errpipe.read } ]
  Process.waitpid pid, 0 rescue nil
  threads.each{|t|t.join}
  return "" if $? != 0
  out.gsub(/<([^>]*)>/,'<[\1](mailto:\1?subject=' + branch + '%20branch)>').gsub(/(?<=\n)( |\t)*/, '')
end

open = ''
open = 'open' if ARGV[0] == 'openSUSE'
usage if open != open && ARGV[0] != 'SUSE'
usage if ARGV.length != 2
output = ARGV[1]

Dir.mkdir("#{output}") unless File.exists?("#{output}")

config = {}

branches = branches_with_flag "publish"

upstream = %w(linux-next vanilla)
opensuse = %w(master stable) + branches.select{|b| b =~ /^openSUSE/}.sort.reverse
sle = branches.select{|b| b =~ /^SLE1[0-9](-SP[0-9])?$/}.sort.reverse
sle_add = (branches-sle).select{|b| b =~ /^SLE1[0-9](-SP[0-9])?/}.sort.reverse

branches = upstream + opensuse + sle + sle_add

all_livepatches = `git ls-remote #{kernel_livepatch}`.lines.select{|l| l =~ %r,^[0-9a-f]{40}\trefs/heads/.*_Update_[0-9]+$,}.map{|l| l.chomp.sub(%r,^[0-9a-f]{40}\trefs/heads/,,"")}
branch_livepatches = {}
branches.each{|b|
  livepatches = all_livepatches.select{|l| l =~ /^#{b}_Update_/}.sort{|a,b| b.sub(/^.*_Update_/,"").to_i <=> a.sub(/^.*_Update_/,"").to_i}
  branch_livepatches[b] = livepatches if livepatches.length > 0
}

config['lang'] = 'en'
config['title'] = "#{open}SUSE Kernel"
config['title_short'] = 'Kernel'
config['description'] = "#{open}SUSE Kernel Site"
config['copyright'] = "© 2011–2020 #{open == '' ? 'SUSE LLC.' : 'openSUSE Contributors'}"
config['url'] = "https://kernel.#{open}suse.#{open == '' ? 'com' : 'org'}"

config['navbar_links'] = []

config['navbar_links'] << {'text' => 'openSUSE', 'children' => opensuse.map{|b| {'text' => b, 'link' => b + '.html'}}}
config['navbar_links'] << {'text' => 'upstream', 'children' => upstream.map{|b| {'text' => b, 'link' => b + '.html'}}}
config['navbar_links'] << {'text' => 'SLE', 'children' => sle.map{|b| {'text' => b, 'link' => b + '.html'}}}
config['navbar_links'] << {'text' => 'SLE Addons', 'children' => sle_add.map{|b| {'text' => b, 'link' => b + '.html'}}}
config['navbar_links'] << {'text' => 'SLE Live Patching', 'children' => branch_livepatches.keys.map{|b| {'text' => b, 'link' => b + '-lp.html'}}}

config['footer_links'] = [{'text' => 'Source Code', 'link' => "https://github.com/#{open}SUSE/kernel-pages"}]

config['plugins'] = ['jekyll-redirect-from']

config['search_provider'] = 'github'
config['search_github_repo'] = 'openSUSE/kernel-pages'

if open != ''
  FileUtils.rm_rf("#{output}/_layouts") if File.exists?("#{output}/_layouts")
  config['remote_theme'] = 'openSUSE/jekyll-theme'
  config['defaults'] = [{'scope' => {'path' => '*.md'}, 'values' => {'layout' => 'markdown'}}]
else
  Dir.mkdir("#{output}/_layouts") unless File.exists?("#{output}/_layouts")
  FileUtils.cp("kernel-web/suse.html", "#{output}/_layouts")
  config['defaults'] = [{'scope' => {'path' => '*.md'}, 'values' => {'layout' => 'suse'}}]
end
config['exclude'] = ['README.md', 'Gemfile', 'Gemfile.lock', 'vendor']

File.write "#{output}/_config.yml", config.to_yaml

FileUtils.cp("kernel-web/Gemfile", "#{output}")

content = File.read("kernel-web/index-content")

File.write "#{output}/index.md", expand_template(content, {
  "content" => content,
  "open" => open
})

content = File.read("kernel-web/branch-content")
lp_content = File.read("kernel-web/livepatch-content")

branches.each{|b|
  repo = b
  repo = 'HEAD' if b == 'master'
  livepatches = "## live patches\nSources of kernel live patch updates " +
    branch_livepatches[b].map{|l| "[#{l}](https://github.com/SUSE/kernel-livepatch/tree/#{l})" }.join(" ") rescue ''
  File.write "#{output}/#{b}.md", expand_template(content, {
    "open" => open,
    "branch" => b,
    "repo" => repo,
    "livepatches" => livepatches,
    "branchinfo" => get_branchinfo(kernel_source, b),
  })
  File.write "#{output}/#{b}-lp.md", expand_template(lp_content, {
    "open" => open,
    "branch" => b,
    "livepatches" => livepatches,
    "branchinfo" => get_branchinfo(kernel_livepatch, branch_livepatches[b][0]),
  }) if branch_livepatches[b]
}
